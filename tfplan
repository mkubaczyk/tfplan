#!/bin/bash

set -e

usage() {
echo -e <<EOF "################################################
# tfplan (https://github.com/mkubaczyk/tfplan) #
################################################

usage: tfplan [-f|--file filename] [-l|--limit \"rule\"] [--dry-run] [positional arguments]

-f|--file                    filename|directory to discover resources from
-l|--limit                   wildcard style rule to limit resources with (must be wrapped with " "]
-h|--help                    display help
--dry-run                    print steps without invoking them
positional arguments         any flag from terraform, that needs to be invoked with tfplan


examples:

$ tfplan -f . -l \"google_compute_firewall.*\"
will discover all files from . path (current directory) and will limits resources to google_compute_firewall only

$ tfplan --file 10_firewall.tf -l \"my_firewall_*\"
will get resources from 10_firewall.tf file and limit them to those containing \"my_firewall_\" in the name

$ tfplan --file 10_firewall.tf -destroy
will destroy every resource from 10_firewall.tf file

"
EOF
}

command="terraform plan -out=plan"
dry_run=false
files=()
limits=()
flags=()
positionals=()

while [[ "$#" -gt 0 ]]
do
    case $1 in
        -f|-f=*|--file|--file=*)
            if [[ $1 == *=* ]]; then
                files+=(`echo $1 | cut -d '=' -f 2`)
                shift
            else
                files+=($2)
                shift
                shift
            fi
            ;;
        -l|-l=*|--limit|--limit=*)
            if [[ $1 == *=* ]]; then
                limits+=(`echo $1 | cut -d '=' -f 2`)
                shift
            else
                limits+=($2)
                shift
                shift
            fi
            ;;
        --dry-run)
            dry_run=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        *) # positional arguments
            positionals+=($1)
            shift
            ;;
    esac
done

files_to_read=()
for file in "${files[@]}"
do
    current_files=()
    IFS=', ' read -r -a current_files <<< "$file"
    for current_file in "${current_files[@]}"
    do
        if [[ -d $current_file ]]; then
            files_to_read+=( `ls $current_file | grep .tf` )
        else
            files_to_read+=($current_file)
        fi
    done
done

limits_to_use=()
for limit in "${limits[@]}"
do
    current_limits=()
    IFS=', ' read -r -a current_limits <<< "$limit"
    for current_limit in "${current_limits[@]}"
    do
        limits_to_use+=($current_limit)
    done
done

for arg in "${positionals[@]}"
do
    command="$command $arg"
done

resources_and_modules=()
for filename in "${files_to_read[@]}"
do
    while read -r line; do
        object=""
        if [[ "$line" =~ ^resource ]]; then
            resource_type=$(echo $line | cut -d '"' -f 2)
            resource_name=$(echo $line | cut -d '"' -f 4)
            object="$resource_type.$resource_name"
        fi
        if [[ "$line" =~ ^module ]]; then
            resource_type=$(echo $line | cut -d '"' -f 1)
            resource_name=$(echo $line | cut -d '"' -f 2)
            resource_type=${resource_type%?}
            object="$resource_type.$resource_name"
        fi
        if [[ $object ]]; then
            if [[ $limits_to_use ]]; then
                for rule in "${limits_to_use[@]}"
                do
                    if [[ $object =~ $rule ]]; then
                        resources_and_modules+=($object)
                    fi
                done
            else
                resources_and_modules+=($object)
            fi
        fi
    done < "$filename"
done

echo -e <<EOF "################################################
# tfplan (https://github.com/mkubaczyk/tfplan) #
################################################
========
Targets:
"
EOF

for object in "${resources_and_modules[@]}"
do
    command="$command -target=$object"
    echo $object
done

if [[ `which landscape` ]]; then
    command="$command | landscape"
fi

echo -e <<EOF "
========
Command:

$command

=======
Output:
"
EOF

if [[ $dry_run == false ]]; then
    eval $command
fi
