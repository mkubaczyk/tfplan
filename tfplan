#!/bin/bash

set -e


usage() {
echo -e <<EOF "################################################
# tfplan (https://github.com/mkubaczyk/tfplan) #
################################################

usage: tfplan [-f|--file filename] [-l|--limit \"rule\"] [--dry-run] [positional arguments]

-f|--file                    filename|directory to discover resources from
-l|--limit                   wildcard style rule to limit resources with (must be wrapped with " "]
-h|--help                    display help
-d|--git-diff                read resources/modules from git diff, automatically disables reading from files even if defined
--dry-run                    print steps without invoking them
--version                    check current version and the newest one available, offers automatic update if newer is available
positional arguments         any flag from terraform, that needs to be invoked with tfplan


examples:

$ tfplan -f . -l \"google_compute_firewall.*\"
will discover all files from . path (current directory) and will limits resources to google_compute_firewall only

$ tfplan --file 10_firewall.tf -l \"my_firewall_*\"
will get resources from 10_firewall.tf file and limit them to those containing \"my_firewall_\" in the name

$ tfplan --file 10_firewall.tf -destroy
will destroy every resource from 10_firewall.tf file

$ tfplan --git-diff
will read resources and modules into targets from git diff

$ tfplan --git-diff -l \"google_compute_firewall.*\"
will read resources from git diff and limit them to google_compute_firewall kind only

"
EOF
}

version() {
    cwd=$(pwd)
    if [[ -L $0 ]]; then
        file_path=$(readlink $(which $0))
        file_dir=$(dirname $file_path)
    else
        file_dir=$(cd $(dirname $0) && pwd -P)
    fi
    set +e
    version=$(cd $file_dir && git fetch origin --tags && git describe --abbrev=0 --tags)
    set -e
    if [[ $version == "" ]]; then
        version="not versioned yet"
    fi
    available_tags=$(cd $file_dir && git tag -l --sort=-v:refname)
    IFS=', ' read -r -a available_tags <<< "$available_tags"
    echo "Current version: $version"
    if [[ $available_tags == $version ]]; then
        echo "You are up to date!"
    else
        echo "Newest version found: $available_tags"
        read -p "Update? (Y/N): " confirm && [[ $confirm == [yY] || $confirm == [yY][eE][sS] ]] || exit 0
		cd $file_dir
		git reset --hard origin/master
		git checkout master
		git pull origin master --tags
		cd $cwd
		version
    fi
}

command="terraform plan -out=plan"
dry_run=false
git_diff=false
files=()
limits=()
flags=()
positionals=()

while [[ "$#" -gt 0 ]]
do
    case $1 in
        -f|-f=*|--file|--file=*)
            if [[ $1 == *=* ]]; then
                files+=(`echo $1 | cut -d '=' -f 2`)
                shift
            else
                files+=($2)
                shift
                shift
            fi
            ;;
        -l|-l=*|--limit|--limit=*)
            if [[ $1 == *=* ]]; then
                limits+=(`echo $1 | cut -d '=' -f 2`)
                shift
            else
                limits+=($2)
                shift
                shift
            fi
            ;;
        --dry-run)
            dry_run=true
            shift
            ;;
        -d|--git-diff)
            git_diff=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        --version)
            version
            exit 0
            ;;
        *) # positional arguments
            positionals+=($1)
            shift
            ;;
    esac
done

parse() {
    object=""
    if [[ "$1" =~ ^(\+|-)?resource ]]; then
        resource_type=$(echo $1 | cut -d '"' -f 2)
        resource_name=$(echo $1 | cut -d '"' -f 4)
        object="$resource_type.$resource_name"
        last_object=$object
    fi
    if [[ "$1" =~ ^(\+|-)?module ]]; then
        resource_type=$(echo $1 | cut -d '"' -f 1)
        resource_name=$(echo $1 | cut -d '"' -f 2)
        resource_type=${resource_type%?}
        object="$resource_type.$resource_name"
        last_object=$object
    fi
    if [[ $git_diff == "true" ]]; then
        if [[ "$1" =~ ^(\+|-) ]] && [[ $last_object != $last_added_object ]]; then
            if [[ $limits_to_use ]]; then
                for rule in "${limits_to_use[@]}"
                do
                    if [[ $last_object =~ $rule ]] && [[ $last_object ]]; then
                        resources_and_modules+=($last_object)
                    fi
                done
            else
                if [[ $last_object ]]; then
                    resources_and_modules+=($last_object)
                fi
            fi
            last_added_object=$last_object
        fi
    else
        if [[ $object ]]; then
            if [[ $limits_to_use ]]; then
                for rule in "${limits_to_use[@]}"
                do
                    if [[ $object =~ $rule ]]; then
                        resources_and_modules+=($object)
                    fi
                done
            else
                resources_and_modules+=($object)
            fi
        fi
    fi
}
resources_and_modules=()
last_found_object=""
last_added_object=""

limits_to_use=()
for limit in "${limits[@]}"
do
    current_limits=()
    IFS=', ' read -r -a current_limits <<< "$limit"
    for current_limit in "${current_limits[@]}"
    do
        limits_to_use+=($current_limit)
    done
done

for arg in "${positionals[@]}"
do
    command="$command $arg"
done

if [[ $git_diff == "true" ]]; then
    diff_output=$(git diff --no-prefix -U10000)
    while read -r line;
    do
        parse "$line"
    done <<< "$diff_output"
else
    files_to_read=()
    for file in "${files[@]}"
    do
        current_files=()
        IFS=', ' read -r -a current_files <<< "$file"
        for current_file in "${current_files[@]}"
        do
            if [[ -d $current_file ]]; then
                files_to_read+=( `ls $current_file | grep .tf` )
            else
                files_to_read+=($current_file)
            fi
        done
    done

    for filename in "${files_to_read[@]}"
    do
        while read -r line; do
            parse "$line"
        done < "$filename"
    done
fi

echo -e <<EOF "################################################
# tfplan (https://github.com/mkubaczyk/tfplan) #
################################################
========
Targets:
"
EOF

if [[ $git_diff == "true" ]] || [[ ${#files_to_read[@]} -gt 0 ]] && [[ ${#resources_and_modules[@]} -eq 0 ]]; then
    echo "No targets were found, exiting"
    exit 1
fi

for object in "${resources_and_modules[@]}"
do
    command="$command -target=$object"
    echo $object
done

if [[ `which landscape` ]]; then
    command="$command | landscape"
fi

echo -e <<EOF "
========
Command:

$command

=======
Output:
"
EOF

if [[ $dry_run == false ]]; then
    eval $command
fi
